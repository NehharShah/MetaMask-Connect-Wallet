{"ast":null,"code":"import web3Utils from 'web3-utils';\nexport const getBalance = async (ethereum, address) => {\n  const balance = await ethereum.request({\n    method: 'eth_getBalance',\n    \"params\": [address, 'latest']\n  });\n  const finalBalance = web3Utils.hexToNumberString(balance);\n  return web3Utils.fromWei(finalBalance, 'ether');\n};\nexport const getNetwork = async (ethereum, chainIdOut) => {\n  let chainIdLocal;\n\n  if (chainIdOut) {\n    chainIdLocal = chainIdOut;\n  } else {\n    const chainId = await ethereum.request({\n      method: 'eth_chainId'\n    });\n    chainIdLocal = chainId;\n  }\n\n  const result = await new Promise(resolve => {\n    switch (chainIdLocal) {\n      case '0x1':\n        resolve(['Mainnet', 'ETH']);\n        break;\n\n      case '0x3':\n        resolve(['Ropsten', 'ROP']);\n        break;\n\n      case '0x2a':\n        resolve(['Kovan', 'KOV']);\n        break;\n\n      case '0x4':\n        resolve(['Rinkeby', 'RIN']);\n        break;\n\n      case '0x5':\n        resolve(['Goerli', 'GoETH']);\n        break;\n\n      default:\n        resolve(['']);\n        break;\n    }\n  });\n  return result;\n};\nexport const getData = async (ethereum, accountsOut) => {\n  if (accountsOut) {\n    const [network, symbol] = await getNetwork(ethereum);\n    return [accountsOut[0], network, symbol];\n  } else {\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts[0]) {\n      const [network, symbol] = await getNetwork(ethereum);\n      return [accounts[0], network, symbol];\n    } else {\n      return false;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/niharshah/Documents/INIOXO/MetaMask/MetaMask/my-app/src/utils/helpers.js"],"names":["web3Utils","getBalance","ethereum","address","balance","request","method","finalBalance","hexToNumberString","fromWei","getNetwork","chainIdOut","chainIdLocal","chainId","result","Promise","resolve","getData","accountsOut","network","symbol","accounts"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AAGA,OAAO,MAAMC,UAAU,GAAG,OAAOC,QAAP,EAAiBC,OAAjB,KAA6B;AACnD,QAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,OAAT,CAAiB;AACnCC,IAAAA,MAAM,EAAE,gBAD2B;AAEnC,cAAU,CAACH,OAAD,EAAU,QAAV;AAFyB,GAAjB,CAAtB;AAKA,QAAMI,YAAY,GAAGP,SAAS,CAACQ,iBAAV,CAA4BJ,OAA5B,CAArB;AAEA,SAAOJ,SAAS,CAACS,OAAV,CAAkBF,YAAlB,EAAgC,OAAhC,CAAP;AACH,CATM;AAYP,OAAO,MAAMG,UAAU,GAAG,OAAOR,QAAP,EAAiBS,UAAjB,KAAgC;AACtD,MAAIC,YAAJ;;AAEA,MAAID,UAAJ,EAAgB;AACZC,IAAAA,YAAY,GAAGD,UAAf;AAEH,GAHD,MAGO;AACH,UAAME,OAAO,GAAG,MAAMX,QAAQ,CAACG,OAAT,CAAiB;AACnCC,MAAAA,MAAM,EAAE;AAD2B,KAAjB,CAAtB;AAIAM,IAAAA,YAAY,GAAGC,OAAf;AACH;;AAED,QAAMC,MAAM,GAAG,MAAM,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AACxC,YAAQJ,YAAR;AACI,WAAK,KAAL;AACII,QAAAA,OAAO,CAAC,CAAC,SAAD,EAAY,KAAZ,CAAD,CAAP;AACA;;AACJ,WAAK,KAAL;AACIA,QAAAA,OAAO,CAAC,CAAC,SAAD,EAAY,KAAZ,CAAD,CAAP;AACA;;AACJ,WAAK,MAAL;AACIA,QAAAA,OAAO,CAAC,CAAC,OAAD,EAAU,KAAV,CAAD,CAAP;AACA;;AACJ,WAAK,KAAL;AACIA,QAAAA,OAAO,CAAC,CAAC,SAAD,EAAY,KAAZ,CAAD,CAAP;AACA;;AACJ,WAAK,KAAL;AACIA,QAAAA,OAAO,CAAC,CAAC,QAAD,EAAW,OAAX,CAAD,CAAP;AACA;;AACJ;AACIA,QAAAA,OAAO,CAAC,CAAC,EAAD,CAAD,CAAP;AACA;AAlBR;AAoBH,GArBoB,CAArB;AAuBA,SAAOF,MAAP;AACH,CAtCM;AAyCP,OAAO,MAAMG,OAAO,GAAG,OAAOf,QAAP,EAAiBgB,WAAjB,KAAiC;AACpD,MAAIA,WAAJ,EAAiB;AACb,UAAM,CAACC,OAAD,EAAUC,MAAV,IAAoB,MAAMV,UAAU,CAACR,QAAD,CAA1C;AACA,WAAO,CAACgB,WAAW,CAAC,CAAD,CAAZ,EAAiBC,OAAjB,EAA0BC,MAA1B,CAAP;AAEH,GAJD,MAIO;AACH,UAAMC,QAAQ,GAAG,MAAMnB,QAAQ,CAACG,OAAT,CAAiB;AACpCC,MAAAA,MAAM,EAAE;AAD4B,KAAjB,CAAvB;;AAIA,QAAIe,QAAQ,CAAC,CAAD,CAAZ,EAAiB;AACb,YAAM,CAACF,OAAD,EAAUC,MAAV,IAAoB,MAAMV,UAAU,CAACR,QAAD,CAA1C;AACA,aAAO,CAACmB,QAAQ,CAAC,CAAD,CAAT,EAAcF,OAAd,EAAuBC,MAAvB,CAAP;AAEH,KAJD,MAIO;AACH,aAAO,KAAP;AACH;AACJ;AACJ,CAlBM","sourcesContent":["import web3Utils from 'web3-utils';\n\n\nexport const getBalance = async (ethereum, address) => {\n    const balance = await ethereum.request({\n        method: 'eth_getBalance', \n        \"params\": [address, 'latest']\n    });\n\n    const finalBalance = web3Utils.hexToNumberString(balance);\n\n    return web3Utils.fromWei(finalBalance, 'ether');\n}\n\n\nexport const getNetwork = async (ethereum, chainIdOut) => {\n    let chainIdLocal;\n\n    if (chainIdOut) {\n        chainIdLocal = chainIdOut;\n        \n    } else {\n        const chainId = await ethereum.request({\n            method: 'eth_chainId'\n        });\n\n        chainIdLocal = chainId;\n    }\n\n    const result = await new Promise(resolve => {\n        switch (chainIdLocal) {\n            case '0x1':\n                resolve(['Mainnet', 'ETH']);\n                break;\n            case '0x3':\n                resolve(['Ropsten', 'ROP']);\n                break;\n            case '0x2a':\n                resolve(['Kovan', 'KOV']);\n                break;\n            case '0x4':\n                resolve(['Rinkeby', 'RIN']);\n                break;\n            case '0x5':\n                resolve(['Goerli', 'GoETH']);\n                break;\n            default:\n                resolve(['']);\n                break;\n        }\n    });\n\n    return result;\n}\n\n\nexport const getData = async (ethereum, accountsOut) => {\n    if (accountsOut) {\n        const [network, symbol] = await getNetwork(ethereum);\n        return [accountsOut[0], network, symbol];\n\n    } else {\n        const accounts = await ethereum.request({\n            method: 'eth_accounts'\n        });\n\n        if (accounts[0]) {\n            const [network, symbol] = await getNetwork(ethereum);\n            return [accounts[0], network, symbol];\n\n        } else {\n            return false;\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}