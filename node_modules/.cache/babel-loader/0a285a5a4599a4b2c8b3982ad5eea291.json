{"ast":null,"code":"var _jsxFileName = \"/Users/niharshah/Documents/INIOXO/MetaMask/MetaMask/my-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from 'react';\nimport Header from './components/Header/Header';\nimport Info from './components/Info/Info';\nimport Modal from './components/Modal/Modal';\nimport { getData, getNetwork, getBalance } from './utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const {\n    ethereum\n  } = window;\n  const [state, setState] = useState({\n    modal: false,\n    address: '',\n    balance: '',\n    network: '',\n    symbol: '',\n    isMetaMaskInstall: false,\n    isConnected: false\n  });\n  useEffect(() => {\n    initialize(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    if (state.address !== '') {\n      getBalance(ethereum, state.address).then(result => {\n        setState(state => ({ ...state,\n          balance: result\n        }));\n      });\n    } else {\n      setState(state => ({ ...state,\n        balance: ''\n      }));\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [state.address, state.network]);\n\n  const initialize = () => {\n    if (ethereum && ethereum.isMetaMask) {\n      console.info('Metamask installed!');\n      setState(state => ({ ...state,\n        isMetaMaskInstall: true\n      }));\n      getData(ethereum).then(result => {\n        if (result) {\n          const [account, network, symbol] = result;\n          setState(state => ({ ...state,\n            address: account,\n            network,\n            symbol,\n            isConnected: true\n          }));\n        } else {\n          setState(state => ({ ...state,\n            isConnected: false\n          }));\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n      ethereum.on('chainChanged', _chainId => {\n        getNetwork(ethereum, _chainId).then(result => {\n          const [network, symbol] = result;\n          setState(state => ({ ...state,\n            network,\n            symbol\n          }));\n        });\n      });\n      ethereum.on('accountsChanged', accounts => {\n        if (accounts[0]) {\n          setState(state => ({ ...state,\n            address: accounts[0]\n          }));\n        } else {\n          setState(state => ({ ...state,\n            address: '',\n            network: '',\n            isConnected: false\n          }));\n        }\n      });\n    } else {\n      console.warn('Metamask not installed!');\n      setState(state => ({ ...state,\n        isMetaMaskInstall: false\n      }));\n    }\n  };\n\n  const connectClickHandler = () => {\n    if (state.isMetaMaskInstall) {\n      ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(result => getData(ethereum, result)).then(result => {\n        const [account, network, symbol] = result;\n        setState(state => ({ ...state,\n          address: account,\n          network,\n          symbol,\n          isConnected: true\n        }));\n      }).catch(error => {\n        console.log(error);\n      });\n    } else {\n      console.warn('Please install MetaMask!');\n      setState(state => ({ ...state,\n        modal: true\n      }));\n    }\n  };\n\n  const modalToogleHandler = () => {\n    setState(state => ({ ...state,\n      modal: !state.modal\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      address: state.address,\n      connected: state.isConnected,\n      onClick: connectClickHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Info, {\n        data: {\n          address: state.address,\n          balance: state.balance,\n          network: state.network,\n          symbol: state.symbol,\n          connected: state.isConnected\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), state.modal && /*#__PURE__*/_jsxDEV(Modal, {\n      onClick: modalToogleHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"+1BHlTslG7QSHJKYyoovgqC7YEM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/niharshah/Documents/INIOXO/MetaMask/MetaMask/my-app/src/App.js"],"names":["React","Fragment","useState","useEffect","Header","Info","Modal","getData","getNetwork","getBalance","App","ethereum","window","state","setState","modal","address","balance","network","symbol","isMetaMaskInstall","isConnected","initialize","then","result","isMetaMask","console","info","account","catch","error","log","on","_chainId","accounts","warn","connectClickHandler","request","method","modalToogleHandler","connected"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport Header from './components/Header/Header';\nimport Info from './components/Info/Info';\nimport Modal from './components/Modal/Modal';\nimport { getData, getNetwork, getBalance } from './utils/helpers';\n\n\nfunction App() {\n    const { ethereum } = window;\n\n    const [state, setState] = useState({\n        modal: false,\n        address: '',\n        balance: '',\n        network: '',\n        symbol: '',\n        isMetaMaskInstall: false,\n        isConnected: false\n    });\n\n\n    useEffect(() => {\n        initialize();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n\n    useEffect(() => {\n        if (state.address !== '') {\n            getBalance(ethereum, state.address).then(\n                result => {\n                    setState(state => ({\n                        ...state,\n                        balance: result\n                    }));\n                }\n            );\n        } else {\n            setState(state => ({\n                ...state,\n                balance: ''\n            }));\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [state.address, state.network]);\n\n\n    const initialize = () => {\n        if (ethereum && ethereum.isMetaMask) {\n            console.info('Metamask installed!');\n\n            setState(state => ({\n                ...state,\n                isMetaMaskInstall: true\n            }));\n\n            getData(ethereum).then(result => {\n                if (result) {\n                    const [account, network, symbol] = result;\n\n                    setState(state => ({\n                        ...state,\n                        address: account,\n                        network,\n                        symbol,\n                        isConnected: true\n                    }));\n\n                } else {\n                    setState(state => ({\n                        ...state,\n                        isConnected: false\n                    }));\n                }\n            }).catch((error) => {\n                console.log(error);\n            });\n\n            ethereum.on('chainChanged', (_chainId) => {\n                getNetwork(ethereum, _chainId).then(result => {\n                    const [network, symbol] = result;\n\n                    setState(state => ({\n                        ...state,\n                        network,\n                        symbol\n                    }));\n                });\n            });\n            \n            ethereum.on('accountsChanged', (accounts) => {\n                if (accounts[0]) {\n                    setState(state => ({\n                        ...state,\n                        address: accounts[0]\n                    }));\n                } else {\n                    setState(state => ({\n                        ...state,\n                        address: '',\n                        network: '',\n                        isConnected: false\n                    }));\n                }\n            });\n\n        } else {\n            console.warn('Metamask not installed!');\n\n            setState(state => ({\n                ...state,\n                isMetaMaskInstall: false\n            }));\n        }\n    }\n\n\n    const connectClickHandler = () => {\n        if (state.isMetaMaskInstall) {\n\n            ethereum.request({method: 'eth_requestAccounts'})\n                .then(result => getData(ethereum, result))\n                .then(result => {\n                    const [account, network, symbol] = result;\n\n                    setState(state => ({\n                        ...state,\n                        address: account,\n                        network,\n                        symbol,\n                        isConnected: true\n                    }));\n\n                }).catch((error) => {\n                    console.log(error);\n                });\n\n        } else {\n            console.warn('Please install MetaMask!');\n            setState(state => ({...state, modal: true}));\n        }\n    }\n\n\n    const modalToogleHandler = () => {\n        setState(state => ({...state, modal: !state.modal}));\n    }\n\n\n    return (\n        <Fragment>\n            <Header\n                address={state.address}\n                connected={state.isConnected}\n                onClick={connectClickHandler}\n            />\n            <div className=\"container\">\n                <Info\n                    data = {{\n                        address: state.address,\n                        balance: state.balance,\n                        network: state.network,\n                        symbol: state.symbol,\n                        connected: state.isConnected\n                    }}\n                />\n            </div>\n            {state.modal && <Modal onClick={modalToogleHandler} />}\n        </Fragment>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}